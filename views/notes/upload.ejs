<style>
  .error-text {
    color: #dc2626; /* red */
    font-size: 0.9rem;
    margin-top: 4px;
    display: none;
  }
</style>

<link rel="stylesheet" href="/css/eachNoteCss.css">

<div class="upload-form-container">
  <h2>üì§ Upload New Note</h2>
  <form id="uploadForm" enctype="multipart/form-data">
    
    <div class="form-group">
      <label for="title">Title *</label>
      <input type="text" name="title" id="title" required>
    </div>

    <div class="form-group">
      <label for="description">Description</label>
      <textarea name="description" id="description" rows="3"></textarea>
    </div>

    <div class="form-group">
      <label for="subject">Subject *</label>
      <select name="subject" id="subject" required>
        <option value="">-- Select Subject --</option>
        <% subjects.forEach(sub => { %>
          <option value="<%= sub._id %>"><%= sub.name %></option>
        <% }) %>
        <option value="other">‚ûï Add New Subject</option>
      </select>
    </div>

    <!-- Hidden input for new subject -->
    <div class="form-group" id="newSubjectGroup" style="display:none;">
      <label for="newSubject">New Subject Name *</label>
      <input type="text" name="newSubject" id="newSubject" placeholder="Enter new subject">
    </div>

    <div class="form-group">
      <label for="course">Course *</label>
      <select name="course" id="course" required>
        <option value="">-- Select Course --</option>
        <% courses.forEach(course => { %>
          <option value="<%= course %>"><%= course %></option>
        <% }) %>
      </select>
    </div>


    <div class="form-group">
      <label for="semester">Semester *</label>
      <select name="semester" id="semester" required>
        <option value="">-- Select Semester --</option>
        <% semester.forEach(s => { %>
          <option value="<%= s %>"><%= s %></option>
        <% }) %>
      </select>
    </div>


    <div class="form-group">
      <label for="visibility">Visibility *</label>
      <select name="visibility" id="visibility" required>
        <option value="public">Public</option>
        <option value="private">Private</option>
      </select>
    </div>

    <div class="form-group">
      <label for="file">Upload File *</label>
      <input type="file" name="file" id="file" accept=".pdf" required>
      <p class="error-text" id="fileError">‚ùå File must be a PDF and less than 5MB.</p>
    </div>

    <button type="submit" class="form-submit-btn">Upload Note</button>
  </form>

  <!-- Progress bar -->
<div id="progressContainer" style="display:none; margin-top:10px;">
  <progress id="progressBar" value="0" max="100" style="width:100%;"></progress>
  <span id="progressText">0%</span>
</div>


</div>

<script src="https://cdn.jsdelivr.net/npm/axios/dist/axios.min.js"></script>


<script>
  const fileInput = document.getElementById("file");
  const fileError = document.getElementById("fileError");
  const form = document.getElementById("uploadForm");

  const progressContainer = document.getElementById("progressContainer");
  const progressBar = document.getElementById("progressBar");
  const progressText = document.getElementById("progressText");

  // Subject toggle
  document.getElementById("subject").addEventListener("change", function() {
    document.getElementById("newSubjectGroup").style.display =
      this.value === "other" ? "block" : "none";
  });

  // File validation
  fileInput.addEventListener("change", function() {
    fileError.style.display = "none";
    const file = this.files[0];
    if (!file) return;

    if (file.type !== "application/pdf") {
      fileError.textContent = "‚ùå Only PDF files are allowed.";
      fileError.style.display = "block";
      this.value = "";
      return;
    }

    if (file.size > 10 * 1024 * 1024) {
      fileError.textContent = "‚ùå File must be less than 10MB. Compress it.";
      fileError.style.display = "block";
      this.value = "";
      return;
    }
  });



  
  // Submit with progress bar
  form.addEventListener("submit", function(e) {
    e.preventDefault();
    if (fileError.style.display === "block") return;

    const formData = new FormData(form);
    progressContainer.style.display = "block";

    axios.post("/upload", formData, {
      headers: { "Content-Type": "multipart/form-data" },
      onUploadProgress: function(progressEvent) {
        const percent = Math.round((progressEvent.loaded * 100) / progressEvent.total);
        progressBar.value = percent;
        progressText.innerText = percent + "%";
      }
    })
    .then(res => {
      alert("‚úÖ Upload successful!");
      form.reset();
      progressContainer.style.display = "none";
      progressBar.value = 0;
      progressText.innerText = "0%";

      // ‚úÖ redirect after success
      window.location.href = "/requestnotes"; 
    })

    .catch(err => {
      alert("‚ùå Upload failed: " + (err.response?.data?.error || err.message));
      progressContainer.style.display = "none";
    });
  });
</script>
